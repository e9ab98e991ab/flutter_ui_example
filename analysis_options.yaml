# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Rationale: in our app, the codes are for reading on mobile phones, adding
    # `this` makes it easier for readers to understand which variables class
    # members and which ones are not.
    unnecessary_this: false
    # Same as above, allow writing local variable types to improve readability
    # without IDE.
    omit_local_variable_types: false
    # We sometimes have print statements just for demo purposes.
    avoid_print: false
    use_string_buffers: false
    avoid_redundant_argument_values: false
    prefer_const_constructors: false
    avoid_dynamic_calls: false
    directives_ordering: false
    sort_pub_dependencies: false
